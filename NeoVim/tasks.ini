# vim: set noet fenc=utf-8 sts=4 sw=4 ts=4 ft=dosini:
# copy from:    https://github.com/skywind3000/vim/blob/master/tasks.ini
# this version: https://github.com/skywind3000/vim/commit/cc3e1e491ec72722f3f7dacdd5e7208d897faefb

[file-build]
command=echo unsupported filetype $(VIM_FILETYPE)
command:c,cpp/win32=gcc -O2 -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lstdc++ -lm -lwinmm -lgdi32 -lws2_32 -msse3 -liphlpapi
command:c,cpp/linux=gcc -O2 -Wall "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lstdc++ -lm -msse3 
command:go=go build -o "$(VIM_PATHNOEXT).exe" "$(VIM_FILEPATH)"
command:make=make -f "$(VIM_FILEPATH)"
output=quickfix
# 结束时发送 QuickFixCmdPost make 触发 errormarker
auto=make
save=2

[file-run]
command="$(VIM_FILEPATH)"
command:c,cpp="$(VIM_PATHNOEXT)"
command:go="$(VIM_PATHNOEXT)"
command:python=python "$(VIM_FILENAME)"
command:python/linux=python3 "$(VIM_FILENAME)"
command:make=make -f "$(VIM_FILENAME)" run
command:emake=emake -e "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:sh=sh "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:zsh=zsh "$(VIM_FILENAME)"
command:bash=bash "$(VIM_FILENAME)"
command:fish=fish "$(VIM_FILENAME)"
command:php=php "$(VIM_FILENAME)"
command:erlang=escript "$(VIM_FILENAME)"
command:ps1=powershell -file "$(VIM_FILENAME)"
command:scala=scala "$(VIM_FILENAME)"
command:haskell=ghci "$(VIM_FILENAME)"
command:applescript=osascript "$(VIM_FILENAME)"
command:vim=echo cannot run $(VIM_FILEPATH)
output=terminal
cwd=$(VIM_FILEDIR)
save=2

[make]
command=make -f "$(VIM_FILEPATH)"
cwd=$(VIM_FILEDIR)

[make-run]
command=make -f "$(VIM_FILEPATH)" run
cwd=$(VIM_FILEDIR)
output=terminal

[make-test]
command=make -f "$(VIM_FILEPATH)" test
cwd=$(VIM_FILEDIR)
output=terminal

#[emake]
#command=emake "$(VIM_FILEPATH)"
#cwd=$(VIM_FILEDIR)
#
#[emake-clean]
#command=emake -clean "$(VIM_FILEPATH)"
#cwd=$(VIM_FILEDIR)
#
#[emake-exe]
#command=emake -e "$(VIM_FILEPATH)"
#cwd=$(VIM_FILEDIR)
#output=terminal
#
#[emake-auto]
#command=emake "$(VIM_FILENAME)"
#command:make=make -f "$(VIM_FILENAME)"
#cwd=$(VIM_FILEDIR)

[project-build]
command=make
cwd=$(VIM_ROOT)

[project-run]
command=make run
cwd=$(VIM_ROOT)
output=terminal

[project-test]
command=make test
cwd=$(VIM_ROOT)
output=terminal


# project-wide search, ask user input keyword
[grep-word]
command=rg -n --no-heading --color never "$(?keyword)" "<root>" -tc -tcpp -tpy -tvim -tgo -tasm -tlua -tjs
cwd=<root>
errorformat=%f:%l:%m

# project-wide search, search the word under cursor
[grep-cword]
command=rg -n --no-heading --color never "$(VIM_CWORD)" "<root>" -tc -tcpp -tpy -tvim -tgo -tasm -tlua -tjs
cwd=<root>
errorformat=%f:%l:%m

#[vc-2015]
#command/win32=d:\dev\vc2015\vcvarsall.cmd cl.exe -nologo -O2 -EHsc "$(VIM_FILEPATH)" 
#cwd=$(VIM_FILEDIR)
#errorformat=%f(%l):%m
#
#[vc-2017]
#command/win32=d:\dev\vc2017\vcvarsall.cmd cl.exe -nologo -O2 /arch:AVX "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT).exe"
#cwd=$(VIM_FILEDIR)
#errorformat=%f(%l):%m

[git-proxy-on]
command=git config --global http.proxy "socks5://127.0.0.1:1079" && git config --global https.proxy "socks5://127.0.0.1:1079"

[git-proxy-off]
command=git config --global --unset http.proxy && git config --global --unset https.proxy

[pwd]
command=cd
cwd=$(VIM_ROOT)
output=terminal

[test]
command=echo default
command:vim/linux=echo vim+linux
command/win32:dosini=echo dosini+win
command/win32:vim=echo vim+win
command:dosini/unix=echo dosini+unix
command:vim/unix=echo vim+unix
